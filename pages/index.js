import Head from 'next/head'
import { useEffect, useState } from 'react';
import Image from 'next/image'
import Link from 'next/link';
import { signInWithPopup, onAuthStateChanged, signOut, signInWithEmailAndPassword, sendPasswordResetEmail } from "firebase/auth";
import { firestore, firebaseAuth } from '@/firebaseconfig';
import axios from 'axios';
import Calender from '@/components/calender';


export default function Home() {

  const [user, setUser] = useState(null)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loader, setLoader] = useState(false)
  const [showpassword, setShowPassword] = useState(false)

  useEffect(() => {
    onAuthStateChanged(firebaseAuth, (res) => {
      if (res !== null) {
        setUser(res)
      }
    })
  }, [])

  const handleForgotPassword = () => {
    setLoader(true)
    if (email !== '') {
      sendPasswordResetEmail(firebaseAuth, email)
        .then(() => {
          handleError('Password reset Email Sent')
          setLoader(false)
        })
        .catch((error) => {
          if (error.code === 'auth/user-not-found') {
            handleError('User not found')
          }
          else if (error.code === 'auth/too-many-requests') {
            handleError('Too many requests')
          }
          else {
            handleError('An error occured, Try again.')
          }
          setLoader(false)
        });
    }
    else {
      handleError('Enter your email.')
      setLoader(false)
    }
  }

  const login = (e) => {
    e.preventDefault()
    setLoader(true)
    signInWithEmailAndPassword(firebaseAuth, email, password)
      .then((res) => {
        setLoader(false)
        // dispatch(authAction(res.user))
        // SyncCart(res.user)
      }).catch((error) => {
        setLoader(false)
        console.log(error.message)
        if (error.code === 'auth/user-not-found') {
          handleError('User not found')
        }
        else if (error.code === 'auth/wrong-password') {
          handleError('Wrong password')
        }
        else if (error.code === 'auth/too-many-requests') {
          handleError('Too many requests')
        }
        else {
          handleError('An error occured, Try again.')
        }
      })
  }

  const handleError = (error) => {
    setError(error)
    setTimeout(() => {
      setError('')
    }, 3000)
  }

  function loginpass() {
    var x = document.getElementById('loginpassword')
    if (x.type === 'password') {
      x.type = 'text'
      setShowPassword(true)
    } else {
      x.type = 'password'
      setShowPassword(false)
    }
  }

  const handleSignOut = () => {
    signOut(firebaseAuth)
      .then(() => {
        setUser(null)
      })
      .catch((error) => {
        console.log(error)
      })
  }



  return (
    <>
      <Head>
        <title>EventX</title>
        <meta name="description" content="Generated by Kendrick Gomez" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='pageContainer'>
        {user
          ? <div className='w-full flex flex-col min-h-screen max-w-5xl'>
            <div className='w-full h-[4rem] flex flex-row items-center justify-end p-2 sticky top-0 text-white text-xs bg-neutral-800'>
              {user.email} &nbsp;
              <button className='primaryButton' onClick={handleSignOut}>Logout</button>
            </div>
            <div>
              <Calender />
            </div>
          </div>
          : <div className='card'>
            {/* <div className='w-14 h-14 rounded-full bg-neutral-600'></div> */}
            {/* <Image src='/Logo.svg' width={60} height={60} /> */}
            <form className='flex flex-col w-full' onSubmit={login}>
              <div className='flex flex-col w-full pt-1'>
                <div className={`${email ? 'h-[0.8rem]' : 'h-0'} leading-3 overflow-hidden transition-all duration-300 text-xs pl-1 text-[#312d9d]`}>
                  Email
                </div>
                <input
                  required
                  type='email'
                  className='border-b outline-none bg-transparent border-[#312d9d] p-1'
                  placeholder='Email'
                  value={email}
                  onChange={(e) => { setEmail(e.target.value) }} />
              </div>
              <div className='flex flex-col w-full mt-2'>
                <div className={`${password ? 'h-[0.8rem]' : 'h-0'} leading-3 overflow-hidden transition-all duration-300 text-xs pl-1 text-[#312d9d]`}>
                  Password
                </div>
                <div className='flex flex-row relative w-full'>
                  <input
                    id='loginpassword'
                    placeholder='Password'
                    className='w-full border-b outline-none bg-transparent border-[#312d9d] p-1 pr-6'
                    type='password'
                    value={password}
                    onChange={(e) =>
                      setPassword(e.target.value)
                    }
                    required
                  />
                  <input
                    className='hidden'
                    type='checkbox'
                    id='loginpasswordcheck'
                    onClick={loginpass}
                  />
                  <label
                    className='absolute right-0 top-0 h-full w-6 p-1 grid place-items-center cursor-pointer'
                    htmlFor='loginpasswordcheck'>
                    <svg
                      xmlns='http://www.w3.org/2000/svg'
                      className=''
                      viewBox='0 0 32 32'>
                      {showpassword ? (
                        <path
                          className='stroke-gray-200'
                          d='M16 8C7.664 8 1.25 15.344 1.25 15.344L.656 16l.594.656s5.848 6.668 13.625 7.282c.371.046.742.062 1.125.062s.754-.016 1.125-.063c7.777-.613 13.625-7.28 13.625-7.28l.594-.657l-.594-.656S24.336 8 16 8zm0 2c2.203 0 4.234.602 6 1.406c.637 1.055 1 2.27 1 3.594a6.995 6.995 0 0 1-6.219 6.969c-.02.004-.043-.004-.062 0c-.239.011-.477.031-.719.031c-.266 0-.523-.016-.781-.031A6.995 6.995 0 0 1 9 15c0-1.305.352-2.52.969-3.563h-.031C11.717 10.617 13.773 10 16 10zm0 2a3 3 0 1 0 .002 6.002A3 3 0 0 0 16 12zm-8.75.938A9.006 9.006 0 0 0 7 15c0 1.754.5 3.395 1.375 4.781A23.196 23.196 0 0 1 3.531 16a23.93 23.93 0 0 1 3.719-3.063zm17.5 0A23.93 23.93 0 0 1 28.469 16a23.196 23.196 0 0 1-4.844 3.781A8.929 8.929 0 0 0 25 15c0-.715-.094-1.398-.25-2.063z'
                        />
                      ) : (
                        <path
                          className='stroke-gray-600'
                          d='M3.719 2.281L2.28 3.72L8.5 9.906L19.594 21l1.906 1.938l6.781 6.78l1.438-1.437l-6.219-6.218c4.234-2.098 7.074-5.211 7.25-5.407l.594-.656l-.594-.656C30.48 15.043 24.086 8 16 8c-1.957 0-3.805.43-5.5 1.063zM16 10c2.152 0 4.188.605 6 1.438A6.925 6.925 0 0 1 23 15a6.966 6.966 0 0 1-1.844 4.719l-2.843-2.844c.417-.512.687-1.16.687-1.875a3 3 0 0 0-3-3c-.715 0-1.363.27-1.875.688l-2.031-2.032C13.336 10.273 14.637 10 16 10zm-9.313.906c-3.207 1.973-5.289 4.27-5.437 4.438L.656 16l.594.656c.258.29 6.18 6.77 13.813 7.282c.308.03.62.062.937.062c.316 0 .629-.031.938-.063a15.13 15.13 0 0 0 2.406-.343l-1.782-1.782A6.897 6.897 0 0 1 16 22c-3.86 0-7-3.14-7-7c0-.531.07-1.05.188-1.563zm.563 2.031A8.922 8.922 0 0 0 7 15a8.88 8.88 0 0 0 1.344 4.719A25.837 25.837 0 0 1 3.406 16a26.112 26.112 0 0 1 3.844-3.063zm17.5 0A26.328 26.328 0 0 1 28.594 16c-.899.867-2.676 2.438-4.969 3.75A8.98 8.98 0 0 0 25 15c0-.7-.09-1.39-.25-2.063z'
                        />
                      )}
                    </svg>
                  </label>
                </div>
              </div>

              <button
                className='text-right text-xs primary-text text-white'
                type='button'
                onClick={handleForgotPassword}>Forgot Password</button>
              <div className='text-center mb-1 h-6 text-red-700'>{error}</div>
              <button type='submit' className='primaryButton'>
                {loader
                  ? "Loading..."
                  : "Login"
                }
              </button>
            </form>
            {/* <div className='flex flex-row'>Don't have an account?&nbsp;<Link href='/signup'><div className='text-[#312d9d] hover:text-[#e18a87]'>Sign Up!</div></Link></div> */}
          </div>
        }
      </div>
    </>
  )
}
